addLegend("bottomright", pal = pal, values = ~mappred$score, title = legend.title, labFormat = labelFormat(suffix = ""), opacity = 0.3)%>%
addCircles
eaflet(mappred) %>%
setView(lng = -96, lat = 45, zoom = 12)%>%
addTiles()%>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 0.8, color = ~pal(mappred$score)) %>%
addLegend("bottomright", pal = pal, values = ~mappred$score, title = legend.title, labFormat = labelFormat(suffix = ""), opacity = 0.3)%>%
addCircles
leaflet(mappred) %>%
setView(lng = -96, lat = 45, zoom = 12)%>%
addTiles()%>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 0.8, color = ~pal(mappred$score)) %>%
addLegend("bottomright", pal = pal, values = ~mappred$score, title = legend.title, labFormat = labelFormat(suffix = ""), opacity = 0.3)%>%
addCircles
leaflet(mappred) %>%
addTiles()%>%
addPolygons(fill = TRUE) %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = 48, 51.5, zoom = 12)
leaflet(mappred) %>%
addTiles()%>%
addPolygons(fill = TRUE) %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = -96, lat = 45,zoom = 12)
leaflet(mappred) %>%
addTiles()%>%
addPolygons(fill = TRUE) %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = -96, lat = 45,zoom = 4)
leaflet(mappred) %>%
addTiles()%>%
addPolygons(fill = TRUE) %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = -120, lat = 45,zoom = 4)
leaflet(mappred) %>%
addTiles()%>%
addPolygons(fill = TRUE) %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = -120, lat = 45,zoom = 5)
leaflet(mappred) %>%
addTiles()%>%
addPolygons(fill = TRUE) %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = -120, lat = 45,zoom = 7)
leaflet(mappred) %>%
addTiles()%>%
addPolygons(fill = TRUE) %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = -120, lat = 45,zoom = 6)
leaflet(mappred) %>%
addTiles()%>%
addPolygons(fill = TRUE) %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = -129, lat = 45,zoom = 6)
leaflet(mappred) %>%
addTiles()%>%
addPolygons(fill = TRUE) %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = -125, lat = 45,zoom = 6)
leaflet(mappred) %>%
addTiles()%>%
addPolygons(fill = TRUE) %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = -122, lat = 45,zoom = 6)
leaflet(mappred) %>%
addTiles()%>%
addPolygons(fill = TRUE) %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = -121, lat = 45,zoom = 6)
leaflet(mappred) %>%
addTiles()%>%
addPolygons(fill = TRUE) %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = -121, lat = 45,zoom = 7)
leaflet(mappred) %>%
addTiles()%>%
addPolygons(fill = TRUE) %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = -121, lat = 45,zoom = 6)
leaflet(mappred) %>%
addTiles()%>%
addPolygons(fill = TRUE, stroke = TRUE, color = "#03F") %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = -121, lat = 45,zoom = 6)
leaflet(mappred) %>%
#addTiles()%>%
addPolygons(fill = TRUE, stroke = TRUE, color = "#03F") %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = -121, lat = 45,zoom = 6)
leaflet(mappred) %>%
addTiles()%>%
addPolygons(fill = FALSE, stroke = TRUE, color = "#03F") %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = -121, lat = 45,zoom = 6)
head(mappred)
leaflet(mappred) %>% addTiles() %>% addProviderTiles(providers$OpenStreetMap) %>%
addPolygons(fill = FALSE, stroke = TRUE, color = "#03F", group = "ID") %>%
# add a legend
#addLegend("bottomright", colors = c("#03F", "#f93"), labels = c("Study area", "Landsat scenes (path - row)")) %>%
# add layers control
addLayersControl(
overlayGroups = c("Z"),
options = layersControlOptions(collapsed = FALSE)
)
map_pred
mappred
names(mappred)
summary(mappred)
summary(map_pred)
qpal <- colorBin("Reds", map_pred$IMPERV2011, bins=5)
leaflet(map_pred) %>%
addPolygons(stroke = TRUE,opacity = 1,fillOpacity = 0.5, smoothFactor = 0.5,
color="black",fillColor = ~qpal(IMPERV2011),weight = 1) %>%
addLegend(values=~IMPERV2011,pal=qpal,title="Crime Count")
qpal <- colorBin("Reds", map_pred$IMPERV2011, bins=5)
map_pred_ll <- spTransform(map_pred, CRS("+datum=NAD83"))
leaflet(map_pred_ll) %>%
addPolygons(stroke = TRUE,opacity = 1,fillOpacity = 0.5, smoothFactor = 0.5,
color="black",fillColor = ~qpal(IMPERV2011),weight = 1) %>%
addLegend(values=~IMPERV2011,pal=qpal,title="Crime Count")
map_pred_ll <- spTransform(map_pred, CRS("+datum=NAD83"))
install.packages("sp")
library(sp)
map_pred_ll <- spTransform(map_pred, CRS("+datum=NAD83"))
summary(map_pred)
map_pred_ll <- spTransform(map_pred, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"))
leaflet(map_pred_ll) %>%
addPolygons(stroke = TRUE,opacity = 1,fillOpacity = 0.5, smoothFactor = 0.5,
color="black",fillColor = ~qpal(IMPERV2011),weight = 1) %>%
addLegend(values=~IMPERV2011,pal=qpal,title="Crime Count")
qpal <- colorBin("Reds", map_pred$IMPERV2011, bins=5)
map_pred_ll <- spTransform(map_pred, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"))
leaflet() %>%
addPolygons(data = map_pred_ll,stroke = TRUE,opacity = 1,fillOpacity = 0.5, smoothFactor = 0.5,
color="black",fillColor = ~qpal(IMPERV2011),weight = 1) %>%
addLegend(values=~IMPERV2011,pal=qpal,title="Impervouas")
qpal <- colorBin("Reds", map_pred$IMPERV2011, bins=5)
map_pred_ll <- spTransform(map_pred, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"))
leaflet() %>%
addPolygons(data = map_pred_ll,stroke = TRUE,opacity = 1,fillOpacity = 0.5, smoothFactor = 0.5,
color="black",fillColor = ~qpal(IMPERV2011),weight = 1) %>%
addLegend(values=~IMPERV2011,pal=qpal,title="Impervouas")
leaflet() %>%
addPolygons(data = map_pred_ll,stroke = TRUE,opacity = 1,fillOpacity = 0.5, smoothFactor = 0.5,
color="black",fillColor = ~qpal(IMPERV2011),weight = 1) %>%
addLegend(data = map_pred_ll,values=~IMPERV2011,pal=qpal,title="Impervouas")
summary(map_pred)
leaflet() %>%
addPolygons(data = map_pred_ll,stroke = TRUE,opacity = 1,fillOpacity = 0.5, smoothFactor = 0.5,
color="black",fillColor = ~qpal(IMPERV2011),weight = 1) %>%
addLegend(data = map_pred_ll)
leaflet() %>%
addPolygons(data = map_pred_ll,stroke = TRUE,opacity = 1,fillOpacity = 0.5, smoothFactor = 0.5,
color="black",fillColor = ~qpal(IMPERV2011),weight = 1)
leaflet() %>%
addPolygons(data = map_pred_ll)
leaflet() %>%
addTiles() %>%
addPolygons(data = ams_ll)
leaflet() %>%
addTiles()
addPolygons(data = map_pred_ll)
leaflet() %>%
addTiles() %>%
addPolygons(data = map_pred_ll)
leaflet(map_pred_ll ) %>%
addTiles()%>%
addPolygons(fill = FALSE, stroke = TRUE, color = "#03F") %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = -121, lat = 45,zoom = 6)
leaflet(map_pred_ll ) %>%
#addTiles()%>%
addPolygons(fill = FALSE, stroke = TRUE, color = "#03F") %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = -121, lat = 45,zoom = 6)
leaflet(map_pred_ll ) %>%
#addTiles()%>%
addPolygons(fill = FALSE, stroke = TRUE, color = "black") %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = -121, lat = 45,zoom = 6)
leaflet(mappred) %>% addTiles() %>% addProviderTiles(providers$OpenStreetMap) %>%
addPolygons(fill = FALSE, stroke = TRUE, color = "#03F", group = "ID") %>%
# add a legend
#addLegend("bottomright", colors = c("#03F", "#f93"), labels = c("Study area", "Landsat scenes (path - row)")) %>%
# add layers control
addLayersControl(
overlayGroups = c("Z"),
options = layersControlOptions(collapsed = FALSE)
)
leaflet(map_pred_ll ) %>%
#addTiles()%>%
addPolygons(fill = FALSE, stroke = TRUE, color = "black",group = "ID") %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = -121, lat = 45,zoom = 6)
leaflet(map_pred_ll ) %>%
addTiles()%>%
addPolygons(fill = FALSE, stroke = TRUE, color = "black",group = "ID") %>%
addLegend(pal = pal, values = ~score) %>%
setView(lng = -121, lat = 45,zoom = 6)
qpal <- colorBin("Reds", map_pred$IMPERV2011, bins=5)
map_pred_ll <- spTransform(map_pred, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"))
leaflet(map_pred_ll ) %>%
addTiles()%>%
addPolygons(fill = FALSE, stroke = TRUE, color = "black",group = "ID") %>%
addLegend(pal = pal, values = ~IMPERV2011) %>%
setView(lng = -121, lat = 45,zoom = 6)
leaflet(map_pred_ll ) %>%
addTiles()%>%
addPolygons(fill = FALSE, stroke = TRUE, color = "black",group = "ID") %>%
addLegend(pal = qpal, values = ~IMPERV2011) %>%
setView(lng = -121, lat = 45,zoom = 6)
map_pred_ll@polygons
map_pred_ll <- spTransform(mappred, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"))
legend.title <- paste(paste0(input$attribute, " ("), round(min(mappred$score, na.rm=T), 2), " - ", round(max(mappred$score, na.rm=T), 2), ")", sep="")
leaflet(map_pred_ll) %>%
setView(lng = -120, lat = 45, zoom = 12)%>%
addTiles()%>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 0.8, color = ~pal(mappred$score)) %>%
addLegend("bottomright", pal = pal, values = ~mappred$score, title = legend.title, labFormat = labelFormat(suffix = ""), opacity = 0.3)%>%
})
leaflet(map_pred_ll) %>%
setView(lng = -120, lat = 45, zoom = 12)%>%
addTiles()%>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 0.8, color = ~pal(mappred$score)) %>%
addLegend("bottomright", pal = pal, values = ~mappred$score, title = legend.title, labFormat = labelFormat(suffix = ""), opacity = 0.3)
# Define server logic required to draw a histogram ----
server <- function(input, output,session) {
# Plot PSM vs. Urbanization (z) ----
# with requested Threshold PSM highlighted
# This generates plot that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$psm_thresh) change
# Return the requested dataset ----
selectedData <- reactive({
Zcrit<-min(d$Z_mean[d$p_psm_mean>input$psm_thresh], na.rm=TRUE)
#Calculate difference between Z_mean and Zcrit (=deltaZ, or the change in Z required to get PSM to 40%)
# for all sites and select out just the bad sites
#add a column for the colors to plot for whether or not site has below threshold psm
attribute<-d[,which(colnames(d)==input$attribute)]
d$attribut_stan<-(attribute-mean(attribute,na.rm=TRUE))/sd(attribute,na.rm=TRUE)
dxy<-subset(d,select=c(Z_mean,attribut_stan))
score<-as.matrix(dist(rbind(c(Zcrit,max(dxy$attribut_stan,na.rm=TRUE)),dxy), method="euclidean"))[1,-1]
dxy<-cbind(d$ID,dxy,d[,which(colnames(d)==input$attribute)],score)
dxy<-dxy[-which(is.na(dxy$attribut_stan)),]
dxy<-dxy[order(dxy$score),]
myPalette <- colorRampPalette(brewer.pal(9, "RdYlBu")) #### Gives us a heat map look
cols = rev(myPalette(length(dxy$score)))
dxy<- data.frame(cbind(dxy,cols))
colnames(dxy)[1:4]<-c("ID","Z","benefit.stan","benefit")
})
# 2. Its output type is a plot
output$plot_psm_z <- renderPlot({
#A cheap way to get Zcrit associated with threshold PSM.
#Need to make this more robust, use model/include full posterior distribution to get error, etc
Zcrit<-min(d$Z_mean[d$p_psm_mean>input$psm_thresh], na.rm=TRUE)
#Calculate difference between Z_mean and Zcrit (=deltaZ, or the change in Z required to get PSM to 40%)
# for all sites and select out just the bad sites
d$Zcrit<-Zcrit
d$deltaZ<-d$Zcrit-d$Z_mean
#add a column for the colors to plot for whether or not site has below threshold psm
d$psmshape<-24
d$psmshape[d$p_psm_mean<input$psm_thresh]<-19
d$psmcol<-"black"
d$psmcol[d$p_psm_mean<input$psm_thresh]<-"gray"
d$psmbg<-"gray"
d$psmbg[d$p_psm_mean<input$psm_thresh]<-NA
## Calculate difference between Z_mean and Zcrit (=deltaZ, or the change in Z required to get PSM to 40%)
## for all sites and select out just the bad sites
#plot(dsubs$p_psm_mean, dsubs$Z_mean, pch=d$shape,cex.lab=1.2,cex.axis=1.2,cex=2, ylab="Urbanization effects (Z)", xlab= "Mean Pre-Spawn Mortality")
plot(d$Z_mean,d$p_psm_mean,pch=d$psmshape, col=d$psmcol, bg=d$psmbg,cex.lab=1.2,cex.axis=1.2,cex=1.52, ylim=c(0,1),
xlab="Urbanization score (Z)", ylab= "Pre-Spawn Mortality")
abline(h=input$psm_thresh, lty=2, lwd=2)
text(min(d$Z_mean, na.rm=TRUE)+1,input$psm_thresh+.02,label="PSM threshold", cex=1.2)
abline(v=Zcrit, lty=2, lwd=2, col="blue")
polygon(c(input$psm_thresh,1,1,input$psm_thresh),c(Zcrit,Zcrit,max(d$Z.mean)+.5,max(d$Z.mean)+.5),
col=adjustcolor("salmon",alpha.f=0.5),
border=NA)
text(.02,Zcrit+.04,label="Zcrit", col="blue",cex=1.2)
legend("topleft", legend=c("Above threshold","Below threshold"), pch=c(24,19),bg=c("gray",NA),col=c("black","gray"), cex=.8, bty="n")
})
output$plot_attribute <- renderPlot({
#A cheap way to get Zcrit associated with threshold PSM.
#Need to make this more robust, use model/include full posterior distribution to get error, etc
Zcrit<-min(d$Z_mean[d$p_psm_mean>input$psm_thresh], na.rm=TRUE)
#Calculate difference between Z_mean and Zcrit (=deltaZ, or the change in Z required to get PSM to 40%)
# for all sites and select out just the bad sites
d$Zcrit<-Zcrit
d$deltaZ<-d$Zcrit-d$Z_mean
#add a column for the colors to plot for whether or not site has below threshold psm
d$psmshape<-17
d$psmshape[d$p_psm_mean<input$psm_thresh]<-19
Zcrit<-min(d$Z_mean[d$p_psm_mean>input$psm_thresh], na.rm=TRUE)
#Calculate difference between Z_mean and Zcrit (=deltaZ, or the change in Z required to get PSM to 40%)
# for all sites and select out just the bad sites
d$Zcrit<-Zcrit
d$deltaZ<-d$Zcrit-d$Z_mean
#add a column for the colors to plot for whether or not site has below threshold psm
d$psmshape<-17
d$psmshape[d$p_psm_mean<input$psm_thresh]<-19
attribute<-d[,which(colnames(d)==input$attribute)]
d$attribut_stan<-(attribute-mean(attribute,na.rm=TRUE))/sd(attribute,na.rm=TRUE)
dxy<-subset(d,select=c(Z_mean,attribut_stan))
score<-as.matrix(dist(rbind(c(Zcrit,max(dxy$attribut_stan,na.rm=TRUE)),dxy), method="euclidean"))[1,-1]
dxy<-cbind(d$ID,dxy,d[,which(colnames(d)==input$attribute)],score)
dxy<-dxy[-which(is.na(dxy$attribut_stan)),]
dxy<-dxy[order(dxy$score),]
myPalette <- colorRampPalette(brewer.pal(9, "RdYlBu")) #### Gives us a heat map look
cols = rev(myPalette(length(dxy$score)))
dxy<- data.frame(cbind(dxy,cols))
colnames(dxy)[1:4]<-c("ID","Z","benefit.stan","benefit")
plot(dxy$Z,dxy$benefit, cex=1.5,cex.lab=1.2,cex.axis=1.2,xlab="Urbanization", ylab= paste(input$attribute), type="p", pch=d$psmshape, col=dxy$cols)
abline(v=Zcrit+.2, lty=2, lwd=2, col="blue")
text(Zcrit,max(dxy$benefit),"zcrit", col= "blue")
mtext(side=1,"high",line=4,adj=1,cex=0.8)
mtext(side=1,"low",line=4,adj=0,cex=0.8)
score_cohopres_m<-dxy
legend("topleft", legend=c("Highest priority","Lowest priority"), pch=19,col=c(cols[1],cols[length(cols)]), cex=.8, bty="n")
})
output$mymap <- renderLeaflet({
# Add scores to map
Zcrit<-min(d$Z_mean[d$p_psm_mean>input$psm_thresh], na.rm=TRUE)
#Calculate difference between Z_mean and Zcrit (=deltaZ, or the change in Z required to get PSM to 40%)
# for all sites and select out just the bad sites
d$Zcrit<-Zcrit
d$deltaZ<-d$Zcrit-d$Z_mean
#add a column for the colors to plot for whether or not site has below threshold psm
Zcrit<-min(d$Z_mean[d$p_psm_mean>input$psm_thresh], na.rm=TRUE)
#Calculate difference between Z_mean and Zcrit (=deltaZ, or the change in Z required to get PSM to 40%)
# for all sites and select out just the bad sites
d$Zcrit<-Zcrit
d$deltaZ<-d$Zcrit-d$Z_mean
#add a column for the colors to plot for whether or not site has below threshold psm
attribute<-d[,which(colnames(d)==input$attribute)]
d$attribut_stan<-(attribute-mean(attribute,na.rm=TRUE))/sd(attribute,na.rm=TRUE)
dxy<-subset(d,select=c(Z_mean,attribut_stan))
score<-as.matrix(dist(rbind(c(Zcrit,max(dxy$attribut_stan,na.rm=TRUE)),dxy), method="euclidean"))[1,-1]
dxy<-cbind(d$ID,dxy,d[,which(colnames(d)==input$attribute)],score)
dxy<-dxy[-which(is.na(dxy$attribut_stan)),]
dxy<-dxy[order(dxy$score),]
myPalette <- colorRampPalette(brewer.pal(9, "RdYlBu")) #### Gives us a heat map look
cols = rev(myPalette(length(dxy$score)))
dxy<- data.frame(cbind(dxy,cols))
colnames(dxy)[1:4]<-c("ID","Z","benefit.stan","benefit")
dxy<-dxy[order(dxy$ID),]
mappred<- merge(map_pred,dxy, by.x="WADOE_ID", by.y="ID")
qpal <- colorBin("Reds", map_pred$IMPERV2011, bins=5)
map_pred_ll <- spTransform(mappred, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"))
# Create leaflet
# pal <- colorNumeric(
#  palette = "RdYlBu",
#  domain = mappred$score # as.numeric(na.omit(x))
#)
legend.title <- paste(paste0(input$attribute, " ("), round(min(mappred$score, na.rm=T), 2), " - ", round(max(mappred$score, na.rm=T), 2), ")", sep="")
leaflet(map_pred_ll) %>%
setView(lng = -121, lat = 45, zoom = 6)%>%
addTiles()%>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 0.8, color = ~pal(mappred$score)) %>%
addLegend("bottomright", pal = pal, values = ~mappred$score, title = legend.title, labFormat = labelFormat(suffix = ""), opacity = 0.3)
})
}
shinyApp(ui = ui, server = server)
citation()
#Only use fishing areas that have atleast 4 years with >20 observations:
#Look at some basic stats about orca observations
#Started with orca_dataprep_occmodel.R code
#4 February 2019
#housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory:
setwd("~/Documents/GitHub/fishphen")
#or from laptop:
#setwd("/Users/aileneettinger/Documents/GitHub/fishphen")
# Load libraries
library(dplyr)
library(mgcv)
library(scales)
library(RColorBrewer)
library(rworldmap)
library(scales)
library(matrixStats)
# 1. Choose the years, regions of interest, assumption about reports in the OrcaMaster and get the data
includeCanada=TRUE
firstyear=1976#probably set to 1975 or 1976 (Olson et al)
assumeSRKW=TRUE #If true, assume that "Orcas" means SRKW unless noted otherwuse (i.e. Transients or NRKWs)
use3regions=FALSE#If true, separate out the straight of Juan de Fuca as a 3rd region, distinct from CSS and PS (all code not yet working for 3 regions!)
d <- read.csv("data/AppendixII.csv")
quads<-read.csv("data/QuadCentroids.csv")
dim(d)#105344     18 on August 8, 2019
# 2. Clean the data (also saved in output/AppendixII_cleaned,csv)
source("analyses/orcaphen/source/clean_orca.R")
dim(d)#105339     21 on August 8, 2019
#4. Get data in terms of number of observations per day and "whale days": days on which whales were seen (presence/absence for each day)
source("analyses/orcaphen/source/orca_get_whaledays.R")
#5. Summarize and plot whale days
wdays<-as.data.frame(tapply(orcasum.days$AllSRpres,list(orcasum.days$year,orcasum.days$region),sum))
wdays.J<-as.data.frame(tapply(orcasum.days$Jpres,list(orcasum.days$year,orcasum.days$region),sum))
wdays.K<-as.data.frame(tapply(orcasum.days$Kpres,list(orcasum.days$year,orcasum.days$region),sum))
wdays.L<-as.data.frame(tapply(orcasum.days$Lpres,list(orcasum.days$year,orcasum.days$region),sum))
source("analyses/orcaphen/source/orca_plot_whaledays.R")
#Only use fishing areas that have atleast 4 years with >20 observations:
#Look at some basic stats about orca observations
#Started with orca_dataprep_occmodel.R code
#4 February 2019
#housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory:
setwd("~/Documents/GitHub/fishphen")
#or from laptop:
#setwd("/Users/aileneettinger/Documents/GitHub/fishphen")
# Load libraries
library(dplyr)
library(mgcv)
library(scales)
library(RColorBrewer)
library(rworldmap)
library(scales)
library(matrixStats)
# 1. Choose the years, regions of interest, assumption about reports in the OrcaMaster and get the data
includeCanada=TRUE
firstyear=1976#probably set to 1975 or 1976 (Olson et al)
assumeSRKW=TRUE #If true, assume that "Orcas" means SRKW unless noted otherwuse (i.e. Transients or NRKWs)
use3regions=FALSE#If true, separate out the straight of Juan de Fuca as a 3rd region, distinct from CSS and PS (all code not yet working for 3 regions!)
d <- read.csv("data/AppendixII.csv")
quads<-read.csv("data/QuadCentroids.csv")
dim(d)#105344     18 on August 8, 2019
# 2. Clean the data (also saved in output/AppendixII_cleaned,csv)
source("analyses/orcaphen/source/clean_orca.R")
dim(d)#105339     21 on August 8, 2019
# 3. Limit space and time to firstyear or later and Salish Sea, Puget Sound, Washington Outer Coast
source("analyses/orcaphen/source/orca_limitspacetime.R")
dim(d)#103289     22
#table(d$FishArea,d$region)#check regions are correct
#4. Get data in terms of number of observations per day and "whale days": days on which whales were seen (presence/absence for each day)
source("analyses/orcaphen/source/orca_get_whaledays.R")
#5. Summarize and plot whale days
wdays<-as.data.frame(tapply(orcasum.days$AllSRpres,list(orcasum.days$year,orcasum.days$region),sum))
wdays.J<-as.data.frame(tapply(orcasum.days$Jpres,list(orcasum.days$year,orcasum.days$region),sum))
wdays.K<-as.data.frame(tapply(orcasum.days$Kpres,list(orcasum.days$year,orcasum.days$region),sum))
wdays.L<-as.data.frame(tapply(orcasum.days$Lpres,list(orcasum.days$year,orcasum.days$region),sum))
quartz(height= 6, width = 10)
#quartz(height= 6, width = 10)
plot(rownames(wdays),wdays$uss,type = "l", ylab= "Number of whale days", xlab= "Year", col = "darkblue", lwd=2,ylim= c(0,250),cex.axis=1.2,cex.lab=1.2)
#Only use fishing areas that have atleast 4 years with >20 observations:
#Look at some basic stats about orca observations
#Started with orca_dataprep_occmodel.R code
#4 February 2019
#housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory:
setwd("~/Documents/GitHub/fishphen")
#or from laptop:
#setwd("/Users/aileneettinger/Documents/GitHub/fishphen")
# Load libraries
library(dplyr)
library(mgcv)
library(scales)
library(RColorBrewer)
library(rworldmap)
library(scales)
library(matrixStats)
# 1. Choose the years, regions of interest, assumption about reports in the OrcaMaster and get the data
includeCanada=TRUE
firstyear=1976#probably set to 1975 or 1976 (Olson et al)
assumeSRKW=FALSE #If true, assume that "Orcas" means SRKW unless noted otherwuse (i.e. Transients or NRKWs)
use3regions=FALSE#If true, separate out the straight of Juan de Fuca as a 3rd region, distinct from CSS and PS (all code not yet working for 3 regions!)
d <- read.csv("data/AppendixII.csv")
quads<-read.csv("data/QuadCentroids.csv")
dim(d)#105344     18 on August 8, 2019
# 2. Clean the data (also saved in output/AppendixII_cleaned,csv)
source("analyses/orcaphen/source/clean_orca.R")
dim(d)#105339     21 on August 8, 2019
# 3. Limit space and time to firstyear or later and Salish Sea, Puget Sound, Washington Outer Coast
source("analyses/orcaphen/source/orca_limitspacetime.R")
dim(d)#103289     22
#table(d$FishArea,d$region)#check regions are correct
#4. Get data in terms of number of observations per day and "whale days": days on which whales were seen (presence/absence for each day)
source("analyses/orcaphen/source/orca_get_whaledays.R")
#5. Summarize and plot whale days
wdays<-as.data.frame(tapply(orcasum.days$AllSRpres,list(orcasum.days$year,orcasum.days$region),sum))
wdays.J<-as.data.frame(tapply(orcasum.days$Jpres,list(orcasum.days$year,orcasum.days$region),sum))
wdays.K<-as.data.frame(tapply(orcasum.days$Kpres,list(orcasum.days$year,orcasum.days$region),sum))
wdays.L<-as.data.frame(tapply(orcasum.days$Lpres,list(orcasum.days$year,orcasum.days$region),sum))
lines(rownames(wdays),wdays$ps,lwd=2,col = "salmon")
legend("topleft",legend=c("Central Salish Sea","Puget Sound Proper"), lty= 1, col=c("darkblue","salmon"), bty="n", lwd=2)
#plot time series against eachother:
plot(as.numeric(wdays$uss),as.numeric(wdays$ps),type = "p", pch=16,cex.axis=1.2,cex.lab=1.2,ylab= "Number of whale days in Puget Sound", xlab= "Number of whale days in the Central Salish Sea",ylim=c(0,100))
#plot time series against eachother:
quartz(height= 6, width = 10)
plot(as.numeric(wdays$uss),as.numeric(wdays$ps),type = "p", pch=16,cex.axis=1.2,cex.lab=1.2,ylab= "Number of whale days in Puget Sound", xlab= "Number of whale days in the Central Salish Sea",ylim=c(0,100))
mod<-lm(as.numeric(wdays$ps)~as.numeric(wdays$uss))
mod.ci<-confint(mod,level=.8)
abline(mod, lty= 3, lwd=2)
mtext(paste("r2 = ",round(summary(mod)$r.squared, digits =2)), side=3, adj=.9,line =-2, cex=1.2)
mod.ci
mtext(paste("r2 = ",round(summary(mod)$r.squared, digits =2)), side=3, adj=.9,line =-2, cex=1.2)
summary(mod)$p
summary(mod)$coeff
summary(mod)$coeff[2,4]
if (summary(mod)$coeff[2,4]<0.05){abline(mod, lty= 3, lwd=1)}
if (summary(mod)$coeff[2,4]>0.05 & summary(mod)$coeff[2,4]<0.1){abline(mod, lty= 3, lwd=2)}
quartz(height= 6, width = 10)
plot(as.numeric(wdays$uss),as.numeric(wdays$ps),type = "p", pch=16,cex.axis=1.2,cex.lab=1.2,ylab= "Number of whale days in Puget Sound", xlab= "Number of whale days in the Central Salish Sea",ylim=c(0,100))
#dev.off()
mod<-lm(as.numeric(wdays$ps)~as.numeric(wdays$uss))
mod.ci<-confint(mod,level=.8)
if (summary(mod)$coeff[2,4]<0.05){abline(mod, lty= 1, lwd=2)}
if (summary(mod)$coeff[2,4]>0.05 & summary(mod)$coeff[2,4]<0.1){abline(mod, lty= 3, lwd=2)}
mtext(paste("r2 = ",round(summary(mod)$r.squared, digits =2)), side=3, adj=.9,line =-2, cex=1.2)
