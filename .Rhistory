options(stringsAsFactors = FALSE)
# libraries
library(RColorBrewer)
# libraries
library(RColorBrewer)
# Setting working directory to source file location
setwd("C:/Users/ailene.ettinger/Box/WAFO_datahelp/CPPC_survey")
d<-read.csv("data/CheckerboardPartnershipCommunitySurvey.csv", header = TRUE)
d$in.cpc<-0
d$in.cpc[d$What.is.your.permanent..five.digit..zip.code.=="98941"]<-1
d$in.cpc[d$What.is.your.permanent..five.digit..zip.code.=="98940"]<-1
d$in.cpc[d$What.is.your.permanent..five.digit..zip.code.=="98943"]<-1
d$in.cpc[d$What.is.your.permanent..five.digit..zip.code.=="98946"]<-1
d$in.cpc[d$What.is.your.permanent..five.digit..zip.code.=="98950"]<-1#none of these
d$in.cpc[d$What.is.your.permanent..five.digit..zip.code.=="98922"]<-1
d$in.cpc[d$What.is.your.permanent..five.digit..zip.code.=="98926"]<-1
d$in.cpc[d$What.is.your.permanent..five.digit..zip.code.=="98925"]<-1
d$in.cpc[d$What.is.your.permanent..five.digit..zip.code.=="98934"]<-1
unique(d$What.is.your.permanent..five.digit..zip.code.[d$in.cpc==1])
d2<-d[-1,]#remove first row, which does not contain data
dincc<-d[d$in.cpc==1,]
dout<-d[d$in.cpc==0,]
resp<-table(d$The.community.referred.to.in.this.project.is.Kittitas.County..In.Kittitas.County..you.are.a..please.select.one.option..)
resp<-resp[-which(names(resp)=="Response")]
names(resp)[2]<-"Other"
byzip<-table(d$in.cpc)
byzip
resp
names(byzip)<-c("nonresident","resident")
windows()
#png("piechart.png",width = 1200, height=500)
par(mfrow=c(1,2))
pie(resp,col=cols, main= "Respondent residency")
cols<-brewer.pal(5,"Set2")
pie(resp,col=cols, main= "Respondent residency")
pie(by,col=cols[1],"white", main= "Residence by zip code")
pie(byzip,col=cols[1],"white", main= "Residence by zip code")
dev.off()
windows()
par(mfrow=c(1,2))
pie(resp,col=cols, main= "Respondent residency")
pie(byzip,col=cols[1],"white", main= "Residence by zip code")
byzip
par(mfrow=c(1,2))
pie(resp,col=cols, main= "Respondent residency")
pie(byzip,col=c(cols[1],"white"), main= "Residence by zip code")
windows()
par(mfrow=c(1,2))
pie(resp,col=cols, main= "Respondent residency")
pie(byzip,col=c(cols[1],"white"), main= "Residence by zip code")
png("piechart.png",width = 1200, height=500)
par(mfrow=c(1,2))
pie(resp,col=cols, main= "Respondent reported residency")
pie(byzip,col=c(cols[1],"white"), main= "Residence by zip code")
dev.off()
png("piechart.png",width = 1200, height=500)
par(mfrow=c(1,2))
pie(resp,col=cols, main= "Respondent reported residency")
pie(byzip,col=c(cols[1],"white"), main= "Residence by zip code")
dev.off()
names(resp)
resp
resp[order(c(3,4,1,5,2))]
resp[order(c(4,3,1,5,2))]
resp[order(c(2,5,4,3,1))]
resp[order(c(2,4,5,3,1))]
resp
resp[4]
resp[orderc(4,3,1,5,1)]
resp[order(4,3,1,5,1)]
resp[c(4,3,1,5,1)]
resp[c(4,3,1,5,2)]
resp<-resp[c(4,3,1,5,2)]
png("piechart.png",width = 1200, height=500)
par(mfrow=c(1,2))
pie(resp,col=cols, main= "Respondent reported residency")
pie(byzip,col=c(cols[1],"white"), main= "Residence by zip code")
dev.off()
png("piechart.png",width = 1200, height=500)
par(mfrow=c(1,2))
pie(resp,col=cols, main= "Respondent reported residency")
pie(byzip,col=c(cols[1],"white"), main= "Residence by zip code")
dev.off()
windows()
par(mfrow=c(1,2))
pie(resp,col=cols, main= "Respondent reported residency")
pie(byzip,col=c(cols[1],"white"), main= "Residence by zip code")
cols<-c("white","lightgray",brewer.pal(3,"Set2")
)
windows9
windows9
windows()
par(mfrow=c(1,2))
pie(resp,col=cols, main= "Respondent reported residency")
pie(byzip,col=c(cols[1],"white"), main= "Residence by zip code")
windows(par(mfrow=c(1,2))
pie(resp,col=cols, main= "Respondent reported residency")
pie(byzip,col=c(cols[3],"white"), main= "Residence by zip code")
)
windows(par(mfrow=c(1,2))
pie(resp,col=cols, main= "Respondent reported residency")
pie(byzip,col=c(cols[3],"white"), main= "Residence by zip code")
pie(resp,col=cols, main= "Respondent reported residency")
pie(byzip,col=c(cols[3],"white"), main= "Residence by zip code")
resp<-resp[c(4,3,5,1,2)]
byzip<-table(d$in.cpc)
names(byzip)<-c("nonresident","resident")
cols<-c("white","lightgray",brewer.pal(3,"Set2"))
windows()
pie(resp,col=cols, main= "Respondent reported residency")
pie(byzip,col=c(cols[3],"white"), main= "Residence by zip code")
par(mfrow=c(1,2))
pie(resp,col=cols, main= "Respondent reported residency")
pie(byzip,col=c(cols[3],"white"), main= "Residence by zip code")
resp
resp<-table(d$The.community.referred.to.in.this.project.is.Kittitas.County..In.Kittitas.County..you.are.a..please.select.one.option..)
resp<-resp[-which(names(resp)=="Response")]
names(resp)[2]<-"Other"
resp<-resp[c(4,3,1,5,2)]
resp
byzip<-table(d$in.cpc)
names(byzip)<-c("nonresident","resident")
cols<-c("white","lightgray",brewer.pal(3,"Set2"))
#png("piechart.png",width = 1200, height=500)
par(mfrow=c(1,2))
pie(resp,col=cols, main= "Respondent reported residency")
pie(byzip,col=c(cols[3],"white"), main= "Residence by zip code")
byzip<-table(d$in.cpc)
names(byzip)<-c("nonresident","resident")
cols<-c("white","lightgray",brewer.pal(3,"Set2"))
#png("piechart.png",width = 1200, height=500)
par(mfrow=c(1,2))
pie(resp,col=cols, main= "Respondent reported residency")
pie(byzip,col=c(cols[3],"white"), main= "Residence by zip code")
resp
resp<-table(d$The.community.referred.to.in.this.project.is.Kittitas.County..In.Kittitas.County..you.are.a..please.select.one.option..)
resp<-resp[-which(names(resp)=="Response")]
names(resp)[2]<-"Other"
resp<-resp[c(4,3,5,1,2)]
byzip<-table(d$in.cpc)
names(byzip)<-c("nonresident","resident")
cols<-c("white","lightgray",brewer.pal(3,"Set2"))
#png("piechart.png",width = 1200, height=500)
par(mfrow=c(1,2))
pie(resp,col=cols, main= "Respondent reported residency")
pie(byzip,col=c(cols[3],"white"), main= "Residence by zip code")
png("piechart.png",width = 1200, height=500)
par(mfrow=c(1,2))
pie(resp,col=cols, main= "Respondent reported residency")
pie(byzip,col=c(cols[3],"white"), main= "Residence by zip code")
dev.off()
dev.off()
png("piechart.png",width = 1200, height=500)
par(mfrow=c(1,2))
pie(resp,col=cols, main= "Respondent reported residency")
pie(byzip,col=c(cols[3],"white"), main= "Residence by zip code")
dev.off9
dev.off()
png("piechart.png",width = 1200, height=500)
par(mfrow=c(1,2))
pie(resp,col=cols, main= "Respondent reported residency")
pie(byzip,col=c(cols[3],"white"), main= "Residence by zip code")
dev.off()
getwd9
getwd()
pdf("piechart.pdf",width = 12, height=5)
par(mfrow=c(1,2))
pie(resp,col=cols, main= "Respondent reported residency")
pie(byzip,col=c(cols[3],"white"), main= "Residence by zip code")
dev.off()
#see the means by residence type
coefs
dprior<-d[,33:40]#columns with anwsers to "The.current.owners.of.the.land.have.set.priorities..which.are.a.condition.of.transferring.the.land..We.would.like.to.know.how.you.would.rank.the.following.priorities."
colnames(dprior)<-dprior[1,]
dprior<-dprior[-1,]
dprior[dprior=="5Very Important"]<-5
dprior[dprior=="4Somewhat Important"]<-4
dprior[dprior=="3Neutral"]<-3
dprior[dprior=="2Less Important"]<-2
dprior[dprior=="1Not Important"]<-1
#convert to numeric (better to do score but for now well use normal distribution)
dprior<-as.data.frame(dprior)
dprior$`Forest health & fire management`<-as.numeric(dprior$`Forest health & fire management`)
dprior$`Working forest management`<-as.numeric(dprior$`Working forest management`)
dprior$Recreation<-as.numeric(dprior$Recreation)
dprior$`Support local economy`<-as.numeric(dprior$`Support local economy`)
dprior$`Water supply & watershed protection`<-as.numeric(dprior$`Water supply & watershed protection`)
dprior$`Fish & wildlife management`<-as.numeric(dprior$`Fish & wildlife management`)
dprior$`Public access to lands`<-as.numeric(dprior$`Public access to lands`)
dprior$`Preservation of cultural heritage`<-as.numeric(dprior$`Preservation of cultural heritage`)
#would be best to fit one hierarchical model for each of this, with random effect of respondent to account for nonindependence and the fact that some respondents may score higher overall, for example
colMeans(dprior)
#would be best to fit one hierarchical model for each of this, with random effect of respondent to account for nonindependence and the fact that some respondents may score higher overall, for example
colMeans(dprior, na.rm=TRUE)
#would be best to fit one hierarchical model for each of this, with random effect of respondent to account for nonindependence and the fact that some respondents may score higher overall, for example
colMeans(dprior[d2$in.cpc==0], na.rm=TRUE)
colMeans(dprior[d2$in.cpc==0,], na.rm=TRUE)
#would be best to fit one hierarchical model for each of this, with random effect of respondent to account for nonindependence and the fact that some respondents may score higher overall, for example
colMeans(dprior, na.rm=TRUE)
#would be best to fit one hierarchical model for each of this, with random effect of respondent to account for nonindependence and the fact that some respondents may score higher overall, for example
sort(colMeans(dprior, na.rm=TRUE))
#nonresidents
sort(colMeans(dprior[d2$in.cpc==0,], na.rm=TRUE))
#residents
sort(colMeans(dprior[d2$in.cpc==1,], na.rm=TRUE))
coefs
m1<-glm(dprior$`Forest health & fire management`~d2$in.cpc)
summary(m1)
#would be best to fit one hierarchical model for each of this, with random effect of respondent to account for nonindependence and the fact that some respondents may score higher overall, for example
#Make table
priortab<-
as.data.frame(cbind(colMeans(dprior, na.rm=TRUE),
colMeans(dprior[d2$in.cpc==0,], na.rm=TRUE),
colMeans(dprior[d2$in.cpc==1,], na.rm=TRUE)))
priortab
#would be best to fit one hierarchical model for each of this, with random effect of respondent to account for nonindependence and the fact that some respondents may score higher overall, for example
#Make table
priortab<-
as.data.frame(round(cbind(colMeans(dprior, na.rm=TRUE),
colMeans(dprior[d2$in.cpc==0,], na.rm=TRUE),
colMeans(dprior[d2$in.cpc==1,], na.rm=TRUE))),digits=2)
priortba
priortab
priortab<-
as.data.frame(cbind(round(colMeans(dprior, na.rm=TRUE),digits=2),
round(colMeans(dprior[d2$in.cpc==0,], na.rm=TRUE),digits=2),
round(colMeans(dprior[d2$in.cpc==1,], na.rm=TRUE)), digits =2)))
priortab<-
as.data.frame(cbind(round(colMeans(dprior, na.rm=TRUE),digits=2),
round(colMeans(dprior[d2$in.cpc==0,], na.rm=TRUE),digits=2),
round(colMeans(dprior[d2$in.cpc==1,], na.rm=TRUE), digits =2)))
priortab
colnames(priortab)=c("Overall","Residents","Non-residents")
priortab
#would be best to fit one hierarchical model for each of this, with random effect of respondent to account for nonindependence and the fact that some respondents may score higher overall, for example
#Make table
priortab<-
as.data.frame(cbind(round(colMeans(dprior, na.rm=TRUE),digits=2),
round(colMeans(dprior[d2$in.cpc==1,], na.rm=TRUE),digits=2),
round(colMeans(dprior[d2$in.cpc==0,], na.rm=TRUE), digits =2)))
colnames(priortab)=c("Overall","Residents","Non-residents")
priortab
priortab[sort(priortab$Overall),]
priortab[sort(priortab$Overall),]
priortab[order(priortab$Overall),]
priortab[order(priortab$Overall, decreasing = TRUE),]
dben<-d[,25:32]#columns with anwsers to "In.your.opinion..how.beneficial.are.the.following.to.the.community."
colnames(dben)<-dben[1,]
dben<-dben[-1,]
#Plot mean ranks for each category, by resident type
#First, replace text with just numbers
dben[dben=="5Very Important"]<-5
dben[dben=="4Somewhat Important"]<-4
dben[dben=="3Neutral"]<-3
dben[dben=="2Less Important"]<-2
dben[dben=="1Not Important"]<-1
#convert to numeric (better to do score but for now well use normal distribution)
dben<-as.data.frame(dben)
dben$Habitat<-as.numeric(dben$Habitat)
dben$Access<-as.numeric(dben$Access)
dben$Recreation<-as.numeric(dben$Recreation)
dben$`Local economies (recreation, forest products, associated businesses)`<-as.numeric(dben$`Local economies (recreation, forest products, associated businesses)`)
dben$`Local management of resources`<-as.numeric(dben$`Local management of resources`)
dben$`Future use (for generations to come)`<-as.numeric(dben$`Future use (for generations to come)`)
dben$`Sense of identity attached to the landscape`<-as.numeric(dben$`Sense of identity attached to the landscape`)
dben$`Open Space (perception of distance and solitude)`<-as.numeric(dben$`Open Space (perception of distance and solitude)`)
#would be best to fit one hierarchical model for each of this, with random effect of respondent to account for nonindependence and the fact that some respondents may score higher overall, for example
#sort(colMeans(dben, na.rm=TRUE))
#names(sort(colMeans(dben, na.rm=TRUE)))
bentab<-
as.data.frame(cbind(round(colMeans(dben, na.rm=TRUE),digits=2),
round(colMeans(dben[d2$in.cpc==1,], na.rm=TRUE),digits=2),
round(colMeans(dben[d2$in.cpc==0,], na.rm=TRUE), digits =2)))
colnames(bentab)=c("Overall","Residents","Non-residents")
bentab<-bentab[order(bentab$Overall, decreasing = TRUE),]
print(bentab)
m1<-glm(dben$`Future use (for generations to come)`~d2$in.cpc)
m2<-glm(dben$Recreation~d2$in.cpc)
m3<-glm(dben$Access~d2$in.cpc)
m4<-glm(dben$Habitat~d2$in.cpc)
m5<-glm(dben$`Open Space (perception of distance and solitude)`~d2$in.cpc)
m6<-glm(dben$`Local management of resources`~d2$in.cpc)
m7<-glm(dben$`Local economies (recreation, forest products, associated businesses)`~d2$in.cpc)
m8<-glm(dben$`Sense of identity attached to the landscape`~d2$in.cpc)
bentab
names(bentab)
rownabes(bentab)
names(colnames(dben))
dben
colnames(dben)
rownames(bentab)
.03*80000
.03*84000
0.8 *24
.8*c(: 0.2, 3.1)
.8*c(0.2, 3.1)
24*c(0.2, 3.1)
24*c(2.3, 1.7,3.0)
log(900)
exp(2)
log(200)
log(10)
exp(2)
exp(3)
log(20)
log(7)
log(900)
log10(2)
log(2)
log(exp(2))
log10(exp(2))
10^2
10^3
#Look at some basic stats about orca observations
#Started with orca_dataprep_occmodel.R code
#4 February 2019
#housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory:
#setwd("~/GitHub/fishphen")
#or from laptop:
#setwd("/Users/aileneettinger/Documents/GitHub/fishphen")
# Load libraries
library(dplyr)
library(mgcv)
library(scales)
library(RColorBrewer)
library(rworldmap)
library(scales)
library(matrixStats)
library(plotfunctions)
library(igraph)
library(brms)
# 1. Choose the years, regions of interest, assumption about reports in the OrcaMaster and get the data
includeCanada=TRUE
firstyear=1976#probably set to 1975 or 1976 (Olson et al)
assumeSRKW=FALSE #If true, assume that "Orcas" means SRKW unless noted otherwuse (i.e. Transients or NRKWs)
use3regions=FALSE#If true, separate out the straight of Juan de Fuca as a 3rd region, distinct from CSS and PS (all code not yet working for 3 regions!)
#Set start of seasons
ps.start<-182#July 1 = 182
uss.start<-91#April 1 = 91,
d <- read.csv("data/AppendixII.csv")
quads<-read.csv("data/QuadCentroids.csv")
dim(d)#105344  18 on Nov 08, 2019
##This code includes just the code for stuff in the manuscript- no data exploration or anything.
#16 Januuary 2019
#housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory:
#setwd("~/GitHub/fishphen")
#or from laptop:
setwd("C:/Users/ailene.ettinger.TNC/OneDrive - The Nature Conservancy/Documents/GitHub/fishphen")
# Load libraries
library(dplyr)
library(mgcv)
library(scales)
library(RColorBrewer)
library(rworldmap)
library(scales)
library(matrixStats)
library(plotfunctions)
library(igraph)
# 1. Choose the years, regions of interest, assumption about reports in the OrcaMaster and get the data
includeCanada=TRUE
firstyear=1976#probably set to 1975 or 1976 (Olson et al)
assumeSRKW=FALSE #If true, assume that "Orcas" means SRKW unless noted otherwuse (i.e. Transients or NRKWs)
use3regions=FALSE#If true, separate out the straight of Juan de Fuca as a 3rd region, distinct from CSS and PS (all code not yet working for 3 regions!)
plotPNG =FALSE#if false, plots pdfs
#Set start of seasons
ps.start<-182#July 1 = 182
uss.start<-91#April 1 = 91,
d <- read.csv("data/AppendixII.csv")
quads<-read.csv("data/QuadCentroids.csv")
dim(d)#105344  18 on Sept 14, 2021
# 2. Clean the data (also saved in output/AppendixII_cleaned,csv)
source("analyses/orcaphen/source/clean_orca.R")
dim(d)#105339     21 on Sept 14, 2021
# 3. Limit space and time to firstyear or later and Salish Sea, Puget Sound, Washington Outer Coast
source("analyses/orcaphen/source/orca_limitspacetime.R")
dim(d)#102512     22 on Sept 14, 2021
#4. Get data in terms of number of observations per day and "whale days": days on which whales were seen (presence/absence for each day)
source("analyses/orcaphen/source/orca_get_whaledays.R")
#5. Summarize and plot whale days
wdays<-as.data.frame(tapply(orcasum.days$AllSRpres,list(orcasum.days$year,orcasum.days$region),sum))
wdays.J<-as.data.frame(tapply(orcasum.days$Jpres,list(orcasum.days$year,orcasum.days$region),sum))
wdays.K<-as.data.frame(tapply(orcasum.days$Kpres,list(orcasum.days$year,orcasum.days$region),sum))
wdays.L<-as.data.frame(tapply(orcasum.days$Lpres,list(orcasum.days$year,orcasum.days$region),sum))
source("analyses/orcaphen/source/orca_plot_whaledays.R")
#6. Make a map of the SRKW sightings in ps and uss (note that this map is not the map used in the ms- Erica made the map)
source("analyses/orcaphen/source/orca_makemap.R")
#8a. Prep the lime kiln only sdata for either gams or linear models
source("analyses/orcaphen/source/orca_get_whaledays_lime.R")
#source("analyses/orcaphen/source/orca_rungams_lime.R")#take a long time, also- should replace with occupancy model fit in jags
limegests<-read.csv("analyses/output/limekiln.srkw.gamests.csv", header=TRUE)
# Make plots of trends in Lime Kiln SRKW phenology, for main text and supplement supplement
#August 2021- this is a reconfiguration of previous versions of figures
#housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
#add libraries
library(dplyr)
library(scales)
# Set working directory:
#setwd("~/GitHub/fishphen")
#or from laptop:
setwd("/Users/aileneettinger/Documents/GitHub/fishphen")
limegests.org<-read.csv("analyses/output/lime_prob.occ.75.csv", header=TRUE)
colnames(limegests.org)[1]<-"styear"
#model estimates have years =1,2,etc. Need to add in actual years
actualyrs<-c(1990,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2014,2015,2016)
yearconvert<-as.data.frame(cbind(unique(limegests.org$styear),actualyrs))
colnames(yearconvert)<-c("styear","year")
limegests<-left_join(limegests.org,yearconvert, copy = TRUE)
limegests<-limegests[limegests$year>1993,]
plotpdf = TRUE #if false, plot as png
pod = "SR"#choices are S,J.K,L
minprob = 0.2
get.gests<-function(limegests,pod){
peakoc.doy<-c()
peakoc<-c()
firstprob<-c()
lastprob<-c()
meanprobs<-c()
prob.lc<-c()
prob.uc<-c()
years<-c()
for(y in unique(limegests$year)){
yeardat<-limegests[limegests$year==y,]
podcol<-yeardat[,which(colnames(yeardat)==paste(pod,"prob.Estimate",sep=""))]
yrpeakoc<-max(podcol)
yrpeakoc.doy<-yeardat$doy[which(podcol==yrpeakoc)]
yrfirst.doy<-yeardat$doy[min(which(podcol>minprob))]
yrlast.doy<-yeardat$doy[max(which(podcol>minprob))]
meanprob<-mean(podcol)
lprob<-quantile(podcol,0.125)
uprob<-quantile(podcol,0.875)
peakoc<-c(peakoc,yrpeakoc)
peakoc.doy<-c(peakoc.doy,yrpeakoc.doy)
firstprob<-c(firstprob,yrfirst.doy)
lastprob<-c(lastprob,yrlast.doy)
meanprobs<-c(meanprobs,meanprob)
prob.lc<-c(prob.lc,lprob)
prob.uc<-c(prob.uc,uprob)
years<-c(years,y)
}
gests<-as.data.frame(cbind(years,peakoc,peakoc.doy,firstprob,lastprob,meanprobs,prob.lc,prob.uc))
row.names(gests)<-NULL
return(gests)
}
gests<-get.gests(limegests,"SR")
jgests<-get.gests(limegests,"J")
kgests<-get.gests(limegests,"K")
lgests<-get.gests(limegests,"L")
#Run linear models to quantify trends
meanmod<-lm(gests$meanprobs~gests$year)
summary(meanmod)  #trend is getting lower
summary(lm(jgests$meanprobs~jgests$year))#not getting lower
summary(lm(kgests$meanprobs~kgests$year))#getting lower
summary(lm(lgests$meanprobs~lgests$year))#getting lower
peakmod<-summary(lm(gests$peakoc.doy~gests$year))#trend is getting later
confint(lm(gests$peakoc.doy~gests$year),level= .75)
peakmod
summary(lm(jgests$peakoc.doy~jgests$year))# getting later
summary(lm(kgests$peakoc.doy~kgests$year))# getting later
summary(lm(lgests$peakoc.doy~lgests$year))#not getting later
confint(lm(gests$lastprob~gests$year),level= .75)
confint(lm(gests$firstprob~gests$year), level=.75)
firstmod<-summary(lm(gests$firstprob~gests$year))#trend is getting later
#Load model
#limegests$year<-as.numeric(rep(seq(1994,2017,by = 1), each = 75))
if(pod== "SR"){limegests$prob.occ<-limegests$SRprob.Estimate
podname = "SRKW"
}
if(pod== "J"){limegests$prob.occ<-limegests$Jprob.Estimate
podname = "J pod"
}
if(pod== "K"){limegests$prob.occ<-limegests$Kprob.Estimate
podname = "K pod"
}
if(pod== "L"){limegests$prob.occ<-limegests$Lprob.Estimate
podname = "L pod"
}
brkyr<-2006
orcasum.days.lime1<-limegests[limegests$year>=1993 & limegests$year<brkyr,]
orcasum.days.lime2<-limegests[limegests$year>=brkyr & limegests$year<2018,]
wdays.old<-cbind(aggregate(orcasum.days.lime1$prob.occ,by=list(orcasum.days.lime1$doy),mean),aggregate(orcasum.days.lime1$prob.occ,by=list(orcasum.days.lime1$doy),sd)$x,aggregate(orcasum.days.lime1$prob.occ,by=list(orcasum.days.lime1$doy),length)$x)
wdays.rec<-cbind(aggregate(orcasum.days.lime2$prob.occ,by=list(orcasum.days.lime2$doy),mean),aggregate(orcasum.days.lime2$prob.occ,by=list(orcasum.days.lime2$doy),sd)$x,aggregate(orcasum.days.lime2$prob.occ,by=list(orcasum.days.lime2$doy),length)$x)
colnames(wdays.old)<-colnames(wdays.rec)<-c("doy","meanocc","sdocc","n")
peakmod
diagnostics(peakmod)
plotDiagnostics(peakmod)
plot(peakmod)
head(peakmod)
fit<-lm(gests$peakoc.doy~gests$year)#trend is getting later
plot(fit)
summary(fit)
fit$fitted.values
cooks.distance(fit)
cooks.distance(fit)>(4/22)
newdat<-gests[-1:2,]
newdat<-gests[!1:2,]
head(newdat)
head(gests)
newdat<-gests[3:22,]
gests[19,]
newdat
newdat[17,]
newdat<-newdat[-17,]
summary(lm(newdat$peakoc.doy~newdat$year))#t
peakmod
