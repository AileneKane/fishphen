install.packages(c("sf", "tidyverse", "sp", "rgeos", "rgdal", "raster",
"units", "prioritizr", "prioritizrdata", "Rsymphony",
"mapview", "assertthat", "velox", "remotes",
"gridExtra", "data.table", "readxl", "BiocManager"))
BiocManager::install("lpsymphony", version = "3.9")
install.packages(c("sf", "tidyverse", "sp", "rgeos", "rgdal", "raster",
"units", "prioritizr", "prioritizrdata", "Rsymphony",
"mapview", "assertthat", "velox", "remotes",
"gridExtra", "data.table", "readxl", "BiocManager", version = '3.9'))
install.packages(c("sf", "tidyverse", "sp", "rgeos", "rgdal", "raster", "units", "prioritizr", "prioritizrdata", "Rsymphony", "mapview", "assertthat", "velox", "remotes", "gridExtra", "data.table", "readxl", "BiocManager", version = "3.9"))
knitr::include_graphics("images/rstudio-new-script.png")
# load packages
library(tidyverse)
install.package("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
# load packages
library(tidyverse)
library(prioritizr)
library(rgdal)
library(raster)
library(rgeos)
library(mapview)
library(units)
library(scales)
library(assertthat)
library(gridExtra)
library(data.table)
library(readxl)
# load packages
library(tidyverse)
install.packages(c("sf", "tidyverse", "sp", "rgeos", "rgdal", "raster",
"units", "prioritizr", "prioritizrdata", "Rsymphony",
"mapview", "assertthat", "velox", "remotes",
"gridExtra", "data.table", "readxl", "BiocManager"))
library(tidyverse)
library(prioritizr)
library(rgdal)
library(raster)
library(rgeos)
library(mapview)
library(units)
library(scales)
library(assertthat)
library(gridExtra)
library(data.table)
library(readxl)
rm(list=ls())
options(device = ifelse(.Platform$OS.type == "windows", "windows", "quartz"))
options(stringsAsFactors = FALSE)
## libraries
library(here)
library(dplyr)
library(RColorBrewer)
library(colorRamps)
set_here("~/GitHub/cohoPSM")
## Step 1:  Read in the data/model estimates- use only predicted attributes for now
psm_pre <- read.table(here("analysis","results","PSM_predictions.txt"), header=TRUE)
rm(list=ls())
options(device = ifelse(.Platform$OS.type == "windows", "windows", "quartz"))
options(stringsAsFactors = FALSE)
## libraries
library(here)
library(dplyr)
library(RColorBrewer)
library(colorRamps)
library(dplyr)
library(yarrr)
library(vioplot)
library(colourvalues)
library(viridis)
library(shape)
library(rstan)
library(Hmisc)
library(matrixStats)
library(here)
library(leaflet)
library(rgdal)
# load functions
source(here("analysis","functions","stan_mean.R"))
source(here("analysis","functions","extract1.R"))
source(here("analysis","functions","sem_psm_predict.R"))
source(here("analysis","functions","sem_lulc_predict.R"))
source(here("analysis","functions","sem_z_crit.R"))
source(here("analysis","functions","vioplot2.R"))
# read and wrangle data
source(here("analysis","cohoPSM1_data.R"))
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory
setwd("~/Documents/GitHub/fishphen")
# Load libraries
library(R2jags)
library(scales)
install.packages("rjags")
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory
setwd("~/Documents/GitHub/fishphen")
# Load libraries
library(R2jags)
library(scales)
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory:
setwd("~/Documents/GitHub/fishphen")
setwd("~/GitHub/fishphen")
# Set working directory:
setwd("~/GitHub/fishphen")
# Load libraries
library(dplyr)
library(brms)
# 1. Read in the datafiles
source("analyses/salmonreturns/source/read_albiondat.R")
dim(d)#6148
unique(d$calDay)
d$calDay<-as.integer(as.character(d$calDay))
allyears<-unique(d$year)
dat<-d
season="allyear"#choices are "springsum" or "fall" or "allyear
head(dat)
dat$effort<-as.numeric(dat$effort)
dat$year2<-as.factor(dat$year)
dat$calDay<-as.numeric(dat$calDay)
dat$catch<-as.numeric(dat$catch)
dat$logcpue<-log(dat$cpue)
m1 <- brm(cpue ~ s(calDay) + (1|year2),
data=dat,
family =gaussian(), cores = 4,
iter = 4000, warmup = 1000, thin = 10,
control = list(adapt_delta = 0.99))
