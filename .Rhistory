### Run MCMC Analysis using jags
library(R2jags)
library(rstan)
library(rjags)
dyn.load(file, DLLpath = DLLpath, ...)
library("jagsUI", lib.loc="~/Library/R/3.5/library")
detach("package:jagsUI", unload=TRUE)
library("R2jags", lib.loc="~/Library/R/3.5/library")
library("R2WinBUGS", lib.loc="~/Library/R/3.5/library")
library("rjags", lib.loc="~/Library/R/3.5/library")
library("jagsUI", lib.loc="~/Library/R/3.5/library")
update.packages("jagsUI")
update.packages("rjags")
update.packages("r2jags")
library(R2jags)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
devtools::install_url("https://sourceforge.net/projects/mcmc-jags/files/JAGS/4.x/Mac%20OS%20X/",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
remove.packages("rjags", lib="~/Library/R/3.5/library")
remove.packages("jagsUI", lib="~/Library/R/3.5/library")
remove.packages("R2jags", lib="~/Library/R/3.5/library")
library("rjags", lib.loc="~/Library/R/3.5/library")
remove.packages("rjags", lib="~/Library/R/3.5/library")
library("R2WinBUGS", lib.loc="~/Library/R/3.5/library")
library("R2jags", lib.loc="~/Library/R/3.5/library")
install.packages("rjags")
library("rjags", lib.loc="~/Library/R/3.5/library")
remove.packages("rjags", lib="~/Library/R/3.5/library")
remove.packages("R2jags", lib="~/Library/R/3.5/library")
install.packages("jagsUI")
library(jagsUI)
library("jagsUI", lib.loc="~/Library/R/3.5/library")
install.packages("~/Downloads/JAGS-4.3.0.dmg", repos = NULL)
library("jagsUI", lib.loc="~/Library/R/3.5/library")
detach("package:jagsUI", unload=TRUE)
remove.packages("jagsUI", lib="~/Library/R/3.5/library")
library("rjags", lib.loc="~/Library/R/3.5/library")
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/4/rjags_4-4.tar.gz")
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/4/rjags_4-4.tar.gz")
library(rjags)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/4/rjags_4-4.tar.gz",)
remove.packages("rjags", lib="~/Library/R/3.5/library")
library(geosphere)
daylength(45,59)
daylength(45,59+61)
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory:
setwd("~/Documents/GitHub/fishphen")
# libraries needed for the leadin code
#library(plyr)
#library(dplyr)
library(rstan)
source("analyses/source/savestan.R") # Dan Flynn code
source("analyses/source/stan_utility.R") # From Mike Betancourt
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
d<-read.csv("analyses/output/wacrdat_1984_1993.csv", header=TRUE)#for now just use the old data
source("source/wcrcdataplease.R")
source("analyses/source/wcrcdataplease.R")
dim(fishsum)
#  source("source/bb_zscorepreds.R")
datalist.chin <- with(fishsum,
list(y = chin,
week = week,
effort = anglers,
N = nrow(fishsum)
)
)
datalist.coho <- with(fishsum,
list(y = coho,
week = week,
effort = anglers,
N = nrow(fishsum)
)
)
datalist.coho
#
## AT THE END ...
str(datalist.chin)
View(datalist.coho)
#First try fitting the model as a gam
for(y in 1987:1994) {
if(y=1988){next}
w=datalist.chin$week
c = datalist.chin$y
effort = datalist.chin$effort
g = gam(log(c+1) ~ s(w) + offset(log(effort)))
plot(w,exp(g$fitted.values), type="l",lwd=3,xlab = "Week",
ylab = "Expected recreational catch", main = paste("Year: ",y))
}
#First try fitting the model as a gam
for(y in 1987:1994) {
if(y==1988){next}
w=datalist.chin$week
c = datalist.chin$y
effort = datalist.chin$effort
g = gam(log(c+1) ~ s(w) + offset(log(effort)))
plot(w,exp(g$fitted.values), type="l",lwd=3,xlab = "Week",
ylab = "Expected recreational catch", main = paste("Year: ",y))
}
library(mgcv)
#First try fitting the model as a gam
for(y in 1987:1994) {
if(y==1988){next}
w=datalist.chin$week
c = datalist.chin$y
effort = datalist.chin$effort
g = gam(log(c+1) ~ s(w) + offset(log(effort)))
plot(w,exp(g$fitted.values), type="l",lwd=3,xlab = "Week",
ylab = "Expected recreational catch", main = paste("Year: ",y))
}
#First try fitting the model as a gam
for(y in 1987:1994) {
if(y==1988){next}
w=as.integer(datalist.chin$week)
c = datalist.chin$y
effort = datalist.chin$effort
g = gam(log(c+1) ~ s(w) + offset(log(effort)))
plot(w,exp(g$fitted.values), type="l",lwd=3,xlab = "Week",
ylab = "Expected recreational catch", main = paste("Year: ",y))
}
as.integer(datalist.chin$week)
datalist.chin$week
fishsum$anglers
fishsum$week
fishsum$chin
tail(fishsum)
fishsum<-subset(fishsum,!is.na(rowSums(ch)))
fishsum<-subset(fishsum,!is.na(rowSums(fishsum)))
rowSums(fishsum)
fishsum<- fishsum [apply(fishsum , 1, function(x) all(!is.na(x))),] # only keep rows of all not na
#Now you're ready to fit the model in stan!
## AT THE END ...
str(datalist.chin)
#First try fitting the model as a gam
for(y in 1987:1994) {
if(y==1988){next}
w=as.integer(datalist.chin$week)
c = datalist.chin$y
effort = datalist.chin$effort
g = gam(log(c+1) ~ s(w) + offset(log(effort)))
plot(w,exp(g$fitted.values), type="l",lwd=3,xlab = "Week",
ylab = "Expected recreational catch", main = paste("Year: ",y))
}
w
#  source("source/bb_zscorepreds.R")
datalist.chin <- with(fishsum,
list(y = chin,
week = week,
effort = anglers,
N = nrow(fishsum)
)
)
datalist.coho <- with(fishsum,
list(y = coho,
week = week,
effort = anglers,
N = nrow(fishsum)
)
)
#Now you're ready to fit the model in stan!
## AT THE END ...
str(datalist.chin)
#First try fitting the model as a gam
for(y in 1987:1994) {
if(y==1988){next}
w=as.integer(datalist.chin$week)
c = datalist.chin$y
effort = datalist.chin$effort
g = gam(log(c+1) ~ s(w) + offset(log(effort)))
plot(w,exp(g$fitted.values), type="l",lwd=3,xlab = "Week",
ylab = "Expected recreational catch", main = paste("Year: ",y))
}
as.integer(datalist.chin$week)
datalist.chin$week
fishsum<- fishsum [apply(fishsum , 1, function(x) all(!is.na(x))),] # only keep rows of all not na
fishsum
tail(fishsum)
fishsum<- fishsum [apply(fishsum , 1, function(x) all(!is.na(x))),] # only keep rows of all not na
tail(fishsum)
fishsum<-fishsum[fishsum$date!="NANA",]
tail(fishsum)
#  source("source/bb_zscorepreds.R")
datalist.chin <- with(fishsum,
list(y = chin,
week = week,
effort = anglers,
N = nrow(fishsum)
)
)
datalist.coho <- with(fishsum,
list(y = coho,
week = week,
effort = anglers,
N = nrow(fishsum)
)
)
#Now you're ready to fit the model in stan!
## AT THE END ...
str(datalist.chin)
#First try fitting the model as a gam
for(y in 1987:1994) {
if(y==1988){next}
w=as.integer(datalist.chin$week)
c = datalist.chin$y
effort = datalist.chin$effort
g = gam(log(c+1) ~ s(w) + offset(log(effort)))
plot(w,exp(g$fitted.values), type="l",lwd=3,xlab = "Week",
ylab = "Expected recreational catch", main = paste("Year: ",y))
}
#First try fitting the model as a gam
for(y in 1987:1994) {
if(y==1988){next}
w=as.integer(datalist.chin$week)
c = datalist.chin$y
effort = datalist.chin$effort
g = gam(log(c+1) ~ s(w) + offset(log(effort)))
points(w,c, pch=21,bg="gray",xlab = "Week",
ylab = "Expected recreational catch", main = paste("Year: ",y))
lines(w,exp(g$fitted.values),lwd=3)
}
#First try fitting the model as a gam
for(y in 1987:1994) {
if(y==1988){next}
w=as.integer(datalist.chin$week)
c = datalist.chin$y
effort = datalist.chin$effort
g = gam(log(c+1) ~ s(w) + offset(log(effort)))
plot(w,c, pch=21,bg="gray",xlab = "Week",
ylab = "Expected recreational catch", main = paste("Year: ",y))
lines(w,exp(g$fitted.values),lwd=3)
}
yr<-fishsum[fishsum$year==y,]
#First try fitting the model as a gam
for(y in 1987:1994) {
if(y==1988){next}
yr<-fishsum[fishsum$year==y,]
w=as.integer(yr$week)
c = yr$chin
effort = yr$anglers
g = gam(log(c+1) ~ s(w) + offset(log(effort)))
plot(w,c, pch=21,bg="gray",xlab = "Week",
ylab = "Expected recreational catch", main = paste("Year: ",y))
lines(w,exp(g$fitted.values),lwd=3)
}
y
yr
